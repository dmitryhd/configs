snippet #!
	#!/usr/bin/env python3

snippet imp
	import ${1:module}

# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		""" ${3:$1: .} """
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Class
snippet test
	class ${1:ClassName}(${2:unittest.TestCase}):
		"""${3:Test case: $1}"""

		def test_(self):
			""" test case """
			self.assertTrue(False)
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		""" ${3:$1:} """
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
# python docstring
snippet ""
	""" ${1} """
# pylint disable
snippet pylint
	# pylint: disable=${1}

snippet TestCase
	#!/usr/bin/env python3

	import unittest


	class TestS(unittest.TestCase):
		def test_smth(self):
			self.assertTrue(True)


	if __name__ == '__main__':
		unittest.main()

snippet color_print
    from colorama import init, Fore;

	def color_print(message, color):
		color_const = None
		colors = {'red': Fore.RED, 'yellow': Fore.YELLOW, 'blue': Fore.BLUE,
				  'green': Fore.GREEN}
		print(colors[color], message, Fore.RESET)
	
snippet main 
	#!/usr/bin/env python3

	import argparse


	def parse_args():
		""" Process command line arguments. """
		parser = argparse.ArgumentParser()
		parser.add_argument("-d", "--db_name", type=str,
							default='data/vac.db',
							help="database name")
		parser.add_argument("-c", "--compress",
							help="do compression",
							action="store_true")
		args = parser.parse_args()
		if args.compress:
			args.db_name = 'xxx'
		return args


	def main():
		""" """
		pass

	if __name__ == '__main__':
		main()

